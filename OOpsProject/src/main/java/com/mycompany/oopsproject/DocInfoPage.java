/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.oopsproject;
import javax.swing.*;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.border.BevelBorder;
import javax.swing.border.Border;

import com.formdev.flatlaf.intellijthemes.materialthemeuilite.FlatNightOwlContrastIJTheme;

import java.sql.*;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.lang.Math;

/**
 *
 * @author shash
 */
public class DocInfoPage extends javax.swing.JFrame {


    public static JTable DocTable;
    /**
     * Creates new form DocInfoPage
     */
    public DocInfoPage() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        DocsImage = new javax.swing.JLabel();
        Reviews = new javax.swing.JLabel();
        DocsName = new javax.swing.JLabel();
        DocsEmail = new javax.swing.JLabel();
        DocPhone = new javax.swing.JLabel();
        BookApp = new javax.swing.JButton();
        Specia = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ReviewArea = new javax.swing.JTextArea();

        int getSele = DocTable.getSelectedRow();
        String DCNAme = DocTable.getValueAt(getSele, 0).toString();
        String DCEmail = DocTable.getValueAt(getSele, 3).toString();
        String DCPhone = DocTable.getValueAt(getSele, 2).toString();
        String DCSpec = DocTable.getValueAt(getSele, 1).toString();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        DocsImage.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        DocsImage.setText("Doc's Image");
        DocsImage.setBackground(java.awt.Color.DARK_GRAY);
        DocsImage.setBorder(new BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        DocsImage.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(DocsImage, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 110, 120));

        Reviews.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        Reviews.setText("Reviews:");
        getContentPane().add(Reviews, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 210, 70, 40));

        DocsName.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        DocsName.setText("Name: " + DCNAme);
        getContentPane().add(DocsName, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 20, 250, 40));

        DocsEmail.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        DocsEmail.setText("Email: " + DCEmail);
        getContentPane().add(DocsEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 60, 250, 40));

        DocPhone.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        DocPhone.setText("Phone: " + DCPhone);
        getContentPane().add(DocPhone, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 100, 250, 40));

        BookApp.setBackground(new java.awt.Color(51, 255, 0));
        BookApp.setFont(new java.awt.Font("Swis721 Blk BT", 1, 18)); // NOI18N
        BookApp.setForeground(new java.awt.Color(0, 51, 255));
        BookApp.setText("Book Appointment");
        BookApp.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 255, 204), 3, true));
        BookApp.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BookApp.setRequestFocusEnabled(false);
        BookApp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BookAppActionPerformed(evt);
            }
        });
        getContentPane().add(BookApp, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 290, 220, 50));

        Specia.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        Specia.setText("Specializes In: " + DCSpec);
        getContentPane().add(Specia, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 140, 250, 40));

        ReviewArea.setColumns(20);
        ReviewArea.setRows(5);
        ReviewArea.setText("None");
        ReviewArea.setEnabled(false);
        jScrollPane1.setViewportView(ReviewArea);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 190, 290, -1));

        setSize(new java.awt.Dimension(515, 400));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void BookAppActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_BookAppActionPerformed
        if (evt.getSource() == BookApp) {

            if (MainWindow.getAvailGlobal > 0 && MainWindow.getStatus == 0) {
                try {
                    String tTIME = JOptionPane.showInputDialog(this, "Time Of Appointment : ", "Book Appointment",
                            JOptionPane.YES_NO_OPTION);
                    MainWindow.TimeOfAppoint = Time.valueOf(tTIME);
                    DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd");
                    LocalDate now = LocalDate.now();
                    // Timestamp ts = Timestamp.valueOf(dtf.format(now).toString());
                    // String tstamptemp = ts.toString();
                    int tstamp = (int) System.currentTimeMillis();
                    MainWindow.getStatus = java.lang.Math.abs(tstamp + (int) Math.random() * 1000);
                    int getSele = DocTable.getSelectedRow();
                    String DCNAme = DocTable.getValueAt(getSele, 0).toString();
                    String DCEmail = DocTable.getValueAt(getSele, 3).toString();
                    PreparedStatement psmt = MainWindow.con.prepareStatement(
                            "UPDATE `signup data` SET `Ap. Status`=?,`DocsName`=?,`DateOfBooking`=?,`TimeOfAppointment`=?, `DocEmail` =? WHERE `Email ID`=?");
                    psmt.setInt(1, MainWindow.getStatus);
                    psmt.setString(2, DCNAme);
                    psmt.setString(3, dtf.format(now));
                    psmt.setTime(4, MainWindow.TimeOfAppoint);
                    psmt.setString(5, DCEmail);
                    psmt.setString(6, MainWindow.Email);
                    MainWindow.DocName = DCNAme;
                    MainWindow.DocEmail = DCEmail;
                    MainWindow.dateofBooking = Date.valueOf(now);
                    int st = psmt.executeUpdate();
                    System.out.println(st);
                    int getAvail = MainWindow.getAvailGlobal;
                    if (st >= 1) {

                        JOptionPane.showMessageDialog(this, "Successfully Booked !", null, 1);
                        int newAvail = getAvail - 1;
                        Updatedata.Updater(DCEmail, String.valueOf(getAvail), String.valueOf(newAvail));
                        MainWindow.getAvailGlobal = getAvail;
                        MainWindow.DocEmail = DCEmail;

                    } else {
                        JOptionPane.showMessageDialog(this, " Booking Failed !", null, JOptionPane.ERROR_MESSAGE);

                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, " Booking Failed !", null, JOptionPane.ERROR_MESSAGE);
                }

            } else if (MainWindow.getStatus != 0) {
                JOptionPane.showMessageDialog(this,
                        " You already have a pending appointment, you cant make anothoer one!", "Not Eligible",
                        JOptionPane.INFORMATION_MESSAGE);
            } else if (MainWindow.getAvailGlobal <= 0) {
                JOptionPane.showMessageDialog(this,
                        "Sorry this Doc has already his schedule packed, wait for him to be available or try someone else!",
                        "Not Available", JOptionPane.INFORMATION_MESSAGE);

            }

        }
    this.dispose();
    }// GEN-LAST:event_BookAppActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(JTable DocjTable) {

        if(DocjTable != null)
        {
            DocTable = DocjTable;
        }
     
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            UIManager.setLookAndFeel(new FlatNightOwlContrastIJTheme());
        } catch (UnsupportedLookAndFeelException e) {
            System.err.println("Failed to initialize LaF");
        }

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DocInfoPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BookApp;
    private javax.swing.JLabel DocPhone;
    private javax.swing.JLabel DocsEmail;
    private javax.swing.JLabel DocsImage;
    private javax.swing.JLabel DocsName;
    private javax.swing.JTextArea ReviewArea;
    private javax.swing.JLabel Reviews;
    private javax.swing.JLabel Specia;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    String[][] fechdocdata() {
        String[][] DocdataArr = new String[1][6];
        return DocdataArr;
    }
}
